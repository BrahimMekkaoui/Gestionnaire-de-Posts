name: Laravel CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -uuser -ppassword" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pdo, sqlite, pdo_mysql, pdo_sqlite, bcmath, ctype, fileinfo, json, tokenizer, xml, intl
        coverage: none

    - name: PHP diagnostics
      run: |
        php -v
        php -m | sort

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.composer/cache/files
        key: ${{ runner.os }}-composer-v3-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-v3-

    - name: Install Dependencies
      run: |
        composer --version
        composer diagnose || true
        composer check-platform-reqs || true
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist || \
          (composer install --no-interaction --prefer-dist -vvv)
        composer dump-autoload
        cp .env.example .env
        php artisan key:generate

    - name: Run Pint (dry-run)
      run: |
        vendor/bin/pint -v --test

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install NPM dependencies
      run: npm ci
    
    - name: Lint frontend (ESLint)
      run: npm run lint

    - name: Build assets
      run: npm run build
    
    - name: Execute tests
      env:
        DB_CONNECTION: mysql
        DB_DATABASE: test_db
        DB_USERNAME: user
        DB_PASSWORD: password
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
      run: |
        php artisan config:clear
        php artisan migrate:fresh --seed --force
        composer test

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: phpunit-coverage
        path: coverage
        if-no-files-found: ignore

    - name: Upload JUnit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: phpunit-junit
        path: junit.xml
        if-no-files-found: ignore

  deploy:
    needs: laravel-tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pdo, sqlite, pdo_mysql, pdo_sqlite, bcmath, ctype, fileinfo, json, tokenizer, xml, intl
    
    - name: Install Dependencies
      run: |
        composer diagnose || true
        composer check-platform-reqs || true
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --no-dev --optimize-autoloader || \
          (composer install --no-interaction --prefer-dist --no-dev --optimize-autoloader -vvv)
        cp .env.example .env
        php artisan key:generate
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install NPM dependencies
      run: npm ci
    
    - name: Build assets
      run: npm run build
    
    - name: Deploy via composite action
      if: ${{ env.SSH_CONFIG != '' }}
      env:
        SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
      uses: ./.github/actions/deploy
      with:
        ssh_config: ${{ env.SSH_CONFIG }}
        source: "*"
        target: "/var/www/gestionnaire-posts"
        script: |
          cd /var/www/gestionnaire-posts
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan migrate --force
          php artisan storage:link
