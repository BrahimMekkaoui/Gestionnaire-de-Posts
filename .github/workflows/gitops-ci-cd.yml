name: Laravel GitOps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pdo, sqlite, fileinfo, intl
          coverage: pcov

      - name: PHP diagnostics
        run: |
          php -v
          php -m | sort

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache/files
          key: ${{ runner.os }}-composer-v3-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-v3-

      - name: Install Dependencies
        run: |
          composer self-update || true
          composer about --gpg-keys || true
          composer --version
          composer diagnose || true
          composer check-platform-reqs || true
          # Try quiet first; if it fails, run verbose to expose errors
          composer install -q --no-ansi --no-interaction --no-progress --prefer-dist || \
            (composer install --no-interaction --prefer-dist -vvv)
          cp .env.example .env
          php artisan key:generate

      - name: Run Pint (dry-run)
        run: |
          vendor/bin/pint -v --test

      - name: Set up SQLite
        run: |
          touch database/database.sqlite
          php artisan migrate --env=testing --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Lint frontend (ESLint)
        run: npm run lint

      - name: Build assets (Vite)
        run: npm run build

      - name: Execute tests (with coverage artifacts)
        run: composer test:coverage

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phpunit-coverage
          path: coverage
          if-no-files-found: ignore

      - name: Upload JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phpunit-junit
          path: junit.xml
          if-no-files-found: ignore

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pdo, sqlite, fileinfo, intl
          
      - name: Deploy Application
        run: |
          # Install dependencies
          composer self-update || true
          composer about --gpg-keys || true
          composer diagnose || true
          composer check-platform-reqs || true
          composer install -q --no-ansi --no-interaction --no-progress --prefer-dist --no-dev --optimize-autoloader || \
            (composer install --no-interaction --prefer-dist --no-dev --optimize-autoloader -vvv)
          
          # Create deploy directory
          mkdir -p deploy
          
          # Copy files to deploy directory (exclude unnecessary files)
          rsync -av --exclude='.git' \
                --exclude='.github' \
                --exclude='node_modules' \
                --exclude='tests' \
                --exclude='.editorconfig' \
                --exclude='.env.example' \
                --exclude='.gitattributes' \
                --exclude='.gitignore' \
                --exclude='phpunit.xml' \
                --exclude='README.md' \
                --exclude='deploy' \
                . deploy/
                
          # Set up environment
          cd deploy
          if [ -f .env ]; then cp .env .env.production; else cp ../.env.example .env.production; fi
          sed -i 's/APP_ENV=local/APP_ENV=production/' .env.production
          sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env.production
          
          # Set up storage and cache directories
          mkdir -p storage/framework/{sessions,views,cache}
          chmod -R 777 storage bootstrap/cache
          
          # Generate application key
          php artisan key:generate --force
          
          # Optimize the application
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          echo "Deployment to ./deploy completed successfully!"
